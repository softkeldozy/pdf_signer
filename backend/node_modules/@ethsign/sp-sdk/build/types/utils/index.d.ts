import { DataLocationOnChain, OnChainSchema, SchemaItemOffChain, SchemaItemOnChain } from '../types';
export declare function request(url: string, options?: RequestInit): Promise<any>;
export declare function validateObject(obj: any, fields: (SchemaItemOnChain | SchemaItemOffChain)[]): boolean;
export declare function encodeOnChainData(data: any, dataLocation: DataLocationOnChain, schemaData: SchemaItemOnChain[]): string;
export declare function decodeOnChainData(data: any, dataLocation: DataLocationOnChain, schemaData: SchemaItemOnChain[]): any;
export declare const stringifyQueryString: (obj: Record<string, any>) => string;
export declare const parseQuery: (params: string) => Record<string, any>;
export declare function uploadStorageData({ data, schema, apiKey, dataLocation, }: {
    data: any;
    schema: OnChainSchema;
    apiKey?: string;
    dataLocation?: DataLocationOnChain;
}): Promise<any>;
export declare function getStorageData({ data, schema, dataLocation, }: {
    data: any;
    schema: OnChainSchema;
    dataLocation?: DataLocationOnChain;
}): Promise<any>;
export declare function isBrowser(): boolean;
//# sourceMappingURL=index.d.ts.map