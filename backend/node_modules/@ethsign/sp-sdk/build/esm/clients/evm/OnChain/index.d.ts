import { PrivateKeyAccount, PublicClient, ReadContractReturnType, WalletClient, WriteContractReturnType } from 'viem';
import { Attestation, AttestationResult, ContractInfo, CreateAttestationOnChainOptions, CreateSchemaOnChainOptions, OnChainAttestation, OnChainClientOptions, OnChainSchema, RevokeAttestationOnChainOptions, RevokeAttestationResult, SchemaResult } from '../../../types';
import { SignProtocolClientBase } from '../../../interface/SignProtocolClientBase';
export declare class EVMOnChainClient implements SignProtocolClientBase {
    walletClient: WalletClient;
    publicClient: PublicClient;
    contractInfo: ContractInfo;
    privateKeyAccount?: PrivateKeyAccount;
    chain: any;
    account: {
        address: `0x${string}`;
    };
    private apiKey?;
    constructor({ chain: chainType, rpcUrl: rpc, account: privateKeyAccount, walletClient, apiKey, }: OnChainClientOptions);
    signMessage(message: string): Promise<`0x${string}`>;
    switchChain(): Promise<void>;
    getAccount(): Promise<any>;
    invokeContractRead(functionName: string, args?: any[]): Promise<ReadContractReturnType>;
    invokeContractWrite(functionName: string, args?: any[], value?: bigint, abi?: any, gas?: bigint): Promise<WriteContractReturnType>;
    createSchema(schema: OnChainSchema, options?: CreateSchemaOnChainOptions): Promise<SchemaResult>;
    getSchema(schemaId: string): Promise<OnChainSchema>;
    revokeAttestation(attestationId: string, options?: RevokeAttestationOnChainOptions): Promise<RevokeAttestationResult>;
    createAttestation(attestation: OnChainAttestation, options?: CreateAttestationOnChainOptions): Promise<AttestationResult>;
    getAttestation(attestationId: string): Promise<Attestation>;
}
//# sourceMappingURL=index.d.ts.map