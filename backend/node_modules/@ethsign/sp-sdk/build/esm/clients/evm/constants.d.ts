import { EvmChains } from './types';
import { Address } from 'viem';
import { DataLocationOffChain } from '../../types';
export declare const ContractInfoMap: {
    mainnet: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Etherscan";
                    readonly url: "https://etherscan.io";
                    readonly apiUrl: "https://api.etherscan.io/api";
                };
            };
            contracts: {
                readonly ensRegistry: {
                    readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
                };
                readonly ensUniversalResolver: {
                    readonly address: "0xce01f8eee7E479C928F8919abD53E553a36CeF67";
                    readonly blockCreated: 19258213;
                };
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 14353601;
                };
            };
            id: 1;
            name: "Ethereum";
            nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://eth.merkle.io"];
                };
            };
            sourceId?: number | undefined;
            testnet?: boolean | undefined;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    bsc: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                    readonly apiUrl: "https://api.bscscan.com/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
            id: 56;
            name: "BNB Smart Chain";
            nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            sourceId?: number | undefined;
            testnet?: boolean | undefined;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    zetachainAthensTestnet: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "ZetaScan";
                    readonly url: "https://athens.explorer.zetachain.com";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                    readonly blockCreated: 2715217;
                };
            };
            id: 7001;
            name: "ZetaChain Athens Testnet";
            nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Zeta";
                readonly symbol: "aZETA";
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://zetachain-athens-evm.blockpi.network/v1/rpc/public"];
                };
            };
            sourceId?: number | undefined;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    opBNBTestnet: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "opbnbscan";
                    readonly url: "https://testnet.opbnbscan.com";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                    readonly blockCreated: 3705108;
                };
                readonly l2OutputOracle: {
                    readonly 97: {
                        readonly address: "0xFf2394Bb843012562f4349C6632a0EcB92fC8810";
                    };
                };
                readonly portal: {
                    readonly 97: {
                        readonly address: "0x4386C8ABf2009aC0c263462Da568DD9d46e52a31";
                    };
                };
                readonly l1StandardBridge: {
                    readonly 97: {
                        readonly address: "0x677311Fd2cCc511Bbc0f581E8d9a07B033D5E840";
                    };
                };
                readonly gasPriceOracle: {
                    readonly address: "0x420000000000000000000000000000000000000F";
                };
                readonly l1Block: {
                    readonly address: "0x4200000000000000000000000000000000000015";
                };
                readonly l2CrossDomainMessenger: {
                    readonly address: "0x4200000000000000000000000000000000000007";
                };
                readonly l2Erc721Bridge: {
                    readonly address: "0x4200000000000000000000000000000000000014";
                };
                readonly l2StandardBridge: {
                    readonly address: "0x4200000000000000000000000000000000000010";
                };
                readonly l2ToL1MessagePasser: {
                    readonly address: "0x4200000000000000000000000000000000000016";
                };
            };
            id: 5611;
            name: "opBNB Testnet";
            nativeCurrency: {
                readonly decimals: 18;
                readonly name: "tBNB";
                readonly symbol: "tBNB";
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://opbnb-testnet-rpc.bnbchain.org"];
                };
            };
            sourceId: 97;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    zetachainMainnet: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "ZetaScan";
                    readonly url: "https://explorer.zetachain.com";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                    readonly blockCreated: 1632781;
                };
            };
            id: 7000;
            name: "ZetaChain";
            nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Zeta";
                readonly symbol: "ZETA";
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://zetachain-evm.blockpi.network/v1/rpc/public"];
                };
            };
            sourceId?: number | undefined;
            testnet: false;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    polygon: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "PolygonScan";
                    readonly url: "https://polygonscan.com";
                    readonly apiUrl: "https://api.polygonscan.com/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 25770160;
                };
            };
            id: 137;
            name: "Polygon";
            nativeCurrency: {
                readonly name: "POL";
                readonly symbol: "POL";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://polygon-rpc.com"];
                };
            };
            sourceId?: number | undefined;
            testnet?: boolean | undefined;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    opBNB: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "opBNB (BSCScan)";
                    readonly url: "https://opbnb.bscscan.com";
                    readonly apiUrl: "https://api-opbnb.bscscan.com/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                    readonly blockCreated: 512881;
                };
                readonly l2OutputOracle: {
                    readonly 56: {
                        readonly address: "0x153CAB79f4767E2ff862C94aa49573294B13D169";
                    };
                };
                readonly portal: {
                    readonly 56: {
                        readonly address: "0x1876EA7702C0ad0C6A2ae6036DE7733edfBca519";
                    };
                };
                readonly l1StandardBridge: {
                    readonly 56: {
                        readonly address: "0xF05F0e4362859c3331Cb9395CBC201E3Fa6757Ea";
                    };
                };
                readonly gasPriceOracle: {
                    readonly address: "0x420000000000000000000000000000000000000F";
                };
                readonly l1Block: {
                    readonly address: "0x4200000000000000000000000000000000000015";
                };
                readonly l2CrossDomainMessenger: {
                    readonly address: "0x4200000000000000000000000000000000000007";
                };
                readonly l2Erc721Bridge: {
                    readonly address: "0x4200000000000000000000000000000000000014";
                };
                readonly l2StandardBridge: {
                    readonly address: "0x4200000000000000000000000000000000000010";
                };
                readonly l2ToL1MessagePasser: {
                    readonly address: "0x4200000000000000000000000000000000000016";
                };
            };
            id: 204;
            name: "opBNB";
            nativeCurrency: {
                readonly name: "BNB";
                readonly symbol: "BNB";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://opbnb-mainnet-rpc.bnbchain.org"];
                };
            };
            sourceId: 56;
            testnet?: boolean | undefined;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    scrollSepolia: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Scrollscan";
                    readonly url: "https://sepolia.scrollscan.com";
                    readonly apiUrl: "https://api-sepolia.scrollscan.com/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 9473;
                };
            };
            id: 534351;
            name: "Scroll Sepolia";
            nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://sepolia-rpc.scroll.io"];
                };
            };
            sourceId?: number | undefined;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    scroll: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Scrollscan";
                    readonly url: "https://scrollscan.com";
                    readonly apiUrl: "https://api.scrollscan.com/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 14;
                };
            };
            id: 534352;
            name: "Scroll";
            nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.scroll.io"];
                    readonly webSocket: readonly ["wss://wss-rpc.scroll.io/ws"];
                };
            };
            sourceId?: number | undefined;
            testnet: false;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    base: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Basescan";
                    readonly url: "https://basescan.org";
                    readonly apiUrl: "https://api.basescan.org/api";
                };
            };
            contracts: {
                readonly disputeGameFactory: {
                    readonly 1: {
                        readonly address: "0x43edB88C4B80fDD2AdFF2412A7BebF9dF42cB40e";
                    };
                };
                readonly l2OutputOracle: {
                    readonly 1: {
                        readonly address: "0x56315b90c40730925ec5485cf004d835058518A0";
                    };
                };
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 5022;
                };
                readonly portal: {
                    readonly 1: {
                        readonly address: "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e";
                        readonly blockCreated: 17482143;
                    };
                };
                readonly l1StandardBridge: {
                    readonly 1: {
                        readonly address: "0x3154Cf16ccdb4C6d922629664174b904d80F2C35";
                        readonly blockCreated: 17482143;
                    };
                };
                readonly gasPriceOracle: {
                    readonly address: "0x420000000000000000000000000000000000000F";
                };
                readonly l1Block: {
                    readonly address: "0x4200000000000000000000000000000000000015";
                };
                readonly l2CrossDomainMessenger: {
                    readonly address: "0x4200000000000000000000000000000000000007";
                };
                readonly l2Erc721Bridge: {
                    readonly address: "0x4200000000000000000000000000000000000014";
                };
                readonly l2StandardBridge: {
                    readonly address: "0x4200000000000000000000000000000000000010";
                };
                readonly l2ToL1MessagePasser: {
                    readonly address: "0x4200000000000000000000000000000000000016";
                };
            };
            id: 8453;
            name: "Base";
            nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://mainnet.base.org"];
                };
            };
            sourceId: 1;
            testnet?: boolean | undefined;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters: {
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcBlock) => {
                        baseFeePerGas: bigint | null;
                        blobGasUsed: bigint;
                        difficulty: bigint;
                        excessBlobGas: bigint;
                        extraData: import("viem").Hex;
                        gasLimit: bigint;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: import("abitype").Address;
                        mixHash: import("viem").Hash;
                        nonce: `0x${string}` | null;
                        number: bigint | null;
                        parentBeaconBlockRoot?: import("viem").Hex | undefined;
                        parentHash: import("viem").Hash;
                        receiptsRoot: import("viem").Hex;
                        sealFields: import("viem").Hex[];
                        sha3Uncles: import("viem").Hash;
                        size: bigint;
                        stateRoot: import("viem").Hash;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                        transactionsRoot: import("viem").Hash;
                        uncles: import("viem").Hash[];
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: import("viem").Hex | undefined;
                    } & {};
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcTransaction) => ({
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: boolean;
                        mint?: bigint | undefined;
                        sourceHash: import("viem").Hex;
                        type: "deposit";
                    } | {
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        v: bigint;
                        to: import("abitype").Address | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        nonce: number;
                        value: bigint;
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip2930";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip1559";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes: readonly import("viem").Hex[];
                        chainId: number;
                        type: "eip4844";
                        gasPrice?: undefined;
                        maxFeePerBlobGas: bigint;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList: import("viem/experimental").SignedAuthorizationList;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip7702";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) & {};
                    type: "transaction";
                };
                readonly transactionReceipt: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                        blobGasPrice?: bigint | undefined;
                        blobGasUsed?: bigint | undefined;
                        blockHash: import("viem").Hash;
                        blockNumber: bigint;
                        contractAddress: import("abitype").Address | null | undefined;
                        cumulativeGasUsed: bigint;
                        effectiveGasPrice: bigint;
                        from: import("abitype").Address;
                        gasUsed: bigint;
                        logs: import("viem").Log<bigint, number, false>[];
                        logsBloom: import("viem").Hex;
                        root?: import("viem").Hash | undefined;
                        status: "success" | "reverted";
                        to: import("abitype").Address | null;
                        transactionHash: import("viem").Hash;
                        transactionIndex: number;
                        type: import("viem").TransactionType;
                        l1GasPrice: bigint | null;
                        l1GasUsed: bigint | null;
                        l1Fee: bigint | null;
                        l1FeeScalar: number | null;
                    } & {};
                    type: "transactionReceipt";
                };
            };
            serializers: {
                readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
            };
        };
    };
    xLayer: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "OKLink";
                    readonly url: "https://www.oklink.com/xlayer";
                    readonly apiUrl: "https://www.oklink.com/api/v5/explorer/xlayer/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                    readonly blockCreated: 47416;
                };
            };
            id: 196;
            name: "X Layer Mainnet";
            nativeCurrency: {
                readonly decimals: 18;
                readonly name: "OKB";
                readonly symbol: "OKB";
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.xlayer.tech"];
                };
            };
            sourceId?: number | undefined;
            testnet?: boolean | undefined;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    plumeTestnet: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Blockscout";
                    readonly url: "https://testnet-explorer.plumenetwork.xyz";
                    readonly apiUrl: "https://testnet-explorer.plumenetwork.xyz/api";
                };
            };
            contracts?: import("viem").Prettify<{
                [key: string]: import("viem").ChainContract | {
                    [sourceId: number]: import("viem").ChainContract | undefined;
                } | undefined;
            } & {
                ensRegistry?: import("viem").ChainContract | undefined;
                ensUniversalResolver?: import("viem").ChainContract | undefined;
                multicall3?: import("viem").ChainContract | undefined;
                universalSignatureVerifier?: import("viem").ChainContract | undefined;
            }> | undefined;
            id: 161221135;
            name: "Plume Testnet";
            nativeCurrency: {
                readonly name: "Plume Sepolia Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://testnet-rpc.plumenetwork.xyz/http"];
                    readonly webSocket: readonly ["wss://testnet-rpc.plumenetwork.xyz/ws"];
                };
            };
            sourceId: 11155111;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    berachainTestnet: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Berachain";
                    readonly url: "https://artio.beratrail.io";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                    readonly blockCreated: 866924;
                };
            };
            id: 80085;
            name: "Berachain Artio";
            nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BERA Token";
                readonly symbol: "BERA";
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://artio.rpc.berachain.com"];
                };
            };
            sourceId?: number | undefined;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    baseSepolia: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Basescan";
                    readonly url: "https://sepolia.basescan.org";
                    readonly apiUrl: "https://api-sepolia.basescan.org/api";
                };
            };
            contracts: {
                readonly disputeGameFactory: {
                    readonly 11155111: {
                        readonly address: "0xd6E6dBf4F7EA0ac412fD8b65ED297e64BB7a06E1";
                    };
                };
                readonly l2OutputOracle: {
                    readonly 11155111: {
                        readonly address: "0x84457ca9D0163FbC4bbfe4Dfbb20ba46e48DF254";
                    };
                };
                readonly portal: {
                    readonly 11155111: {
                        readonly address: "0x49f53e41452c74589e85ca1677426ba426459e85";
                        readonly blockCreated: 4446677;
                    };
                };
                readonly l1StandardBridge: {
                    readonly 11155111: {
                        readonly address: "0xfd0Bf71F60660E2f608ed56e1659C450eB113120";
                        readonly blockCreated: 4446677;
                    };
                };
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 1059647;
                };
                readonly gasPriceOracle: {
                    readonly address: "0x420000000000000000000000000000000000000F";
                };
                readonly l1Block: {
                    readonly address: "0x4200000000000000000000000000000000000015";
                };
                readonly l2CrossDomainMessenger: {
                    readonly address: "0x4200000000000000000000000000000000000007";
                };
                readonly l2Erc721Bridge: {
                    readonly address: "0x4200000000000000000000000000000000000014";
                };
                readonly l2StandardBridge: {
                    readonly address: "0x4200000000000000000000000000000000000010";
                };
                readonly l2ToL1MessagePasser: {
                    readonly address: "0x4200000000000000000000000000000000000016";
                };
            };
            id: 84532;
            name: "Base Sepolia";
            nativeCurrency: {
                readonly name: "Sepolia Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://sepolia.base.org"];
                };
            };
            sourceId: 11155111;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters: {
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcBlock) => {
                        baseFeePerGas: bigint | null;
                        blobGasUsed: bigint;
                        difficulty: bigint;
                        excessBlobGas: bigint;
                        extraData: import("viem").Hex;
                        gasLimit: bigint;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: import("abitype").Address;
                        mixHash: import("viem").Hash;
                        nonce: `0x${string}` | null;
                        number: bigint | null;
                        parentBeaconBlockRoot?: import("viem").Hex | undefined;
                        parentHash: import("viem").Hash;
                        receiptsRoot: import("viem").Hex;
                        sealFields: import("viem").Hex[];
                        sha3Uncles: import("viem").Hash;
                        size: bigint;
                        stateRoot: import("viem").Hash;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                        transactionsRoot: import("viem").Hash;
                        uncles: import("viem").Hash[];
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: import("viem").Hex | undefined;
                    } & {};
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcTransaction) => ({
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: boolean;
                        mint?: bigint | undefined;
                        sourceHash: import("viem").Hex;
                        type: "deposit";
                    } | {
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        v: bigint;
                        to: import("abitype").Address | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        nonce: number;
                        value: bigint;
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip2930";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip1559";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes: readonly import("viem").Hex[];
                        chainId: number;
                        type: "eip4844";
                        gasPrice?: undefined;
                        maxFeePerBlobGas: bigint;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList: import("viem/experimental").SignedAuthorizationList;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip7702";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) & {};
                    type: "transaction";
                };
                readonly transactionReceipt: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                        blobGasPrice?: bigint | undefined;
                        blobGasUsed?: bigint | undefined;
                        blockHash: import("viem").Hash;
                        blockNumber: bigint;
                        contractAddress: import("abitype").Address | null | undefined;
                        cumulativeGasUsed: bigint;
                        effectiveGasPrice: bigint;
                        from: import("abitype").Address;
                        gasUsed: bigint;
                        logs: import("viem").Log<bigint, number, false>[];
                        logsBloom: import("viem").Hex;
                        root?: import("viem").Hash | undefined;
                        status: "success" | "reverted";
                        to: import("abitype").Address | null;
                        transactionHash: import("viem").Hash;
                        transactionIndex: number;
                        type: import("viem").TransactionType;
                        l1GasPrice: bigint | null;
                        l1GasUsed: bigint | null;
                        l1Fee: bigint | null;
                        l1FeeScalar: number | null;
                    } & {};
                    type: "transactionReceipt";
                };
            };
            serializers: {
                readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
            };
            readonly network: "base-sepolia";
        };
    };
    sepolia: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Etherscan";
                    readonly url: "https://sepolia.etherscan.io";
                    readonly apiUrl: "https://api-sepolia.etherscan.io/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 751532;
                };
                readonly ensRegistry: {
                    readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
                };
                readonly ensUniversalResolver: {
                    readonly address: "0xc8Af999e38273D658BE1b921b88A9Ddf005769cC";
                    readonly blockCreated: 5317080;
                };
            };
            id: 11155111;
            name: "Sepolia";
            nativeCurrency: {
                readonly name: "Sepolia Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://sepolia.drpc.org"];
                };
            };
            sourceId?: number | undefined;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    polygonAmoy: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "PolygonScan";
                    readonly url: "https://amoy.polygonscan.com";
                    readonly apiUrl: "https://api-amoy.polygonscan.com/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 3127388;
                };
            };
            id: 80002;
            name: "Polygon Amoy";
            nativeCurrency: {
                readonly name: "POL";
                readonly symbol: "POL";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc-amoy.polygon.technology"];
                };
            };
            sourceId?: number | undefined;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    optimism: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Optimism Explorer";
                    readonly url: "https://optimistic.etherscan.io";
                    readonly apiUrl: "https://api-optimistic.etherscan.io/api";
                };
            };
            contracts: {
                readonly disputeGameFactory: {
                    readonly 1: {
                        readonly address: "0xe5965Ab5962eDc7477C8520243A95517CD252fA9";
                    };
                };
                readonly l2OutputOracle: {
                    readonly 1: {
                        readonly address: "0xdfe97868233d1aa22e815a266982f2cf17685a27";
                    };
                };
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 4286263;
                };
                readonly portal: {
                    readonly 1: {
                        readonly address: "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed";
                    };
                };
                readonly l1StandardBridge: {
                    readonly 1: {
                        readonly address: "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1";
                    };
                };
                readonly gasPriceOracle: {
                    readonly address: "0x420000000000000000000000000000000000000F";
                };
                readonly l1Block: {
                    readonly address: "0x4200000000000000000000000000000000000015";
                };
                readonly l2CrossDomainMessenger: {
                    readonly address: "0x4200000000000000000000000000000000000007";
                };
                readonly l2Erc721Bridge: {
                    readonly address: "0x4200000000000000000000000000000000000014";
                };
                readonly l2StandardBridge: {
                    readonly address: "0x4200000000000000000000000000000000000010";
                };
                readonly l2ToL1MessagePasser: {
                    readonly address: "0x4200000000000000000000000000000000000016";
                };
            };
            id: 10;
            name: "OP Mainnet";
            nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://mainnet.optimism.io"];
                };
            };
            sourceId: 1;
            testnet?: boolean | undefined;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters: {
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcBlock) => {
                        baseFeePerGas: bigint | null;
                        blobGasUsed: bigint;
                        difficulty: bigint;
                        excessBlobGas: bigint;
                        extraData: import("viem").Hex;
                        gasLimit: bigint;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: import("abitype").Address;
                        mixHash: import("viem").Hash;
                        nonce: `0x${string}` | null;
                        number: bigint | null;
                        parentBeaconBlockRoot?: import("viem").Hex | undefined;
                        parentHash: import("viem").Hash;
                        receiptsRoot: import("viem").Hex;
                        sealFields: import("viem").Hex[];
                        sha3Uncles: import("viem").Hash;
                        size: bigint;
                        stateRoot: import("viem").Hash;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                        transactionsRoot: import("viem").Hash;
                        uncles: import("viem").Hash[];
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: import("viem").Hex | undefined;
                    } & {};
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcTransaction) => ({
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: boolean;
                        mint?: bigint | undefined;
                        sourceHash: import("viem").Hex;
                        type: "deposit";
                    } | {
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        v: bigint;
                        to: import("abitype").Address | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        nonce: number;
                        value: bigint;
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip2930";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip1559";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes: readonly import("viem").Hex[];
                        chainId: number;
                        type: "eip4844";
                        gasPrice?: undefined;
                        maxFeePerBlobGas: bigint;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList: import("viem/experimental").SignedAuthorizationList;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip7702";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) & {};
                    type: "transaction";
                };
                readonly transactionReceipt: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                        blobGasPrice?: bigint | undefined;
                        blobGasUsed?: bigint | undefined;
                        blockHash: import("viem").Hash;
                        blockNumber: bigint;
                        contractAddress: import("abitype").Address | null | undefined;
                        cumulativeGasUsed: bigint;
                        effectiveGasPrice: bigint;
                        from: import("abitype").Address;
                        gasUsed: bigint;
                        logs: import("viem").Log<bigint, number, false>[];
                        logsBloom: import("viem").Hex;
                        root?: import("viem").Hash | undefined;
                        status: "success" | "reverted";
                        to: import("abitype").Address | null;
                        transactionHash: import("viem").Hash;
                        transactionIndex: number;
                        type: import("viem").TransactionType;
                        l1GasPrice: bigint | null;
                        l1GasUsed: bigint | null;
                        l1Fee: bigint | null;
                        l1FeeScalar: number | null;
                    } & {};
                    type: "transactionReceipt";
                };
            };
            serializers: {
                readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
            };
        };
    };
    gnosisChiado: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Blockscout";
                    readonly url: "https://blockscout.chiadochain.net";
                    readonly apiUrl: "https://blockscout.chiadochain.net/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                    readonly blockCreated: 4967313;
                };
            };
            id: 10200;
            name: "Gnosis Chiado";
            nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Gnosis";
                readonly symbol: "xDAI";
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.chiadochain.net"];
                    readonly webSocket: readonly ["wss://rpc.chiadochain.net/wss"];
                };
            };
            sourceId?: number | undefined;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    optimismSepolia: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Blockscout";
                    readonly url: "https://optimism-sepolia.blockscout.com";
                    readonly apiUrl: "https://optimism-sepolia.blockscout.com/api";
                };
            };
            contracts: {
                readonly disputeGameFactory: {
                    readonly 11155111: {
                        readonly address: "0x05F9613aDB30026FFd634f38e5C4dFd30a197Fa1";
                    };
                };
                readonly l2OutputOracle: {
                    readonly 11155111: {
                        readonly address: "0x90E9c4f8a994a250F6aEfd61CAFb4F2e895D458F";
                    };
                };
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 1620204;
                };
                readonly portal: {
                    readonly 11155111: {
                        readonly address: "0x16Fc5058F25648194471939df75CF27A2fdC48BC";
                    };
                };
                readonly l1StandardBridge: {
                    readonly 11155111: {
                        readonly address: "0xFBb0621E0B23b5478B630BD55a5f21f67730B0F1";
                    };
                };
                readonly gasPriceOracle: {
                    readonly address: "0x420000000000000000000000000000000000000F";
                };
                readonly l1Block: {
                    readonly address: "0x4200000000000000000000000000000000000015";
                };
                readonly l2CrossDomainMessenger: {
                    readonly address: "0x4200000000000000000000000000000000000007";
                };
                readonly l2Erc721Bridge: {
                    readonly address: "0x4200000000000000000000000000000000000014";
                };
                readonly l2StandardBridge: {
                    readonly address: "0x4200000000000000000000000000000000000010";
                };
                readonly l2ToL1MessagePasser: {
                    readonly address: "0x4200000000000000000000000000000000000016";
                };
            };
            id: 11155420;
            name: "OP Sepolia";
            nativeCurrency: {
                readonly name: "Sepolia Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://sepolia.optimism.io"];
                };
            };
            sourceId: 11155111;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters: {
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcBlock) => {
                        baseFeePerGas: bigint | null;
                        blobGasUsed: bigint;
                        difficulty: bigint;
                        excessBlobGas: bigint;
                        extraData: import("viem").Hex;
                        gasLimit: bigint;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: import("abitype").Address;
                        mixHash: import("viem").Hash;
                        nonce: `0x${string}` | null;
                        number: bigint | null;
                        parentBeaconBlockRoot?: import("viem").Hex | undefined;
                        parentHash: import("viem").Hash;
                        receiptsRoot: import("viem").Hex;
                        sealFields: import("viem").Hex[];
                        sha3Uncles: import("viem").Hash;
                        size: bigint;
                        stateRoot: import("viem").Hash;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/chains").OpStackTransaction<boolean>[];
                        transactionsRoot: import("viem").Hash;
                        uncles: import("viem").Hash[];
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: import("viem").Hex | undefined;
                    } & {};
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcTransaction) => ({
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: boolean;
                        mint?: bigint | undefined;
                        sourceHash: import("viem").Hex;
                        type: "deposit";
                    } | {
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        v: bigint;
                        to: import("abitype").Address | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        nonce: number;
                        value: bigint;
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip2930";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip1559";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes: readonly import("viem").Hex[];
                        chainId: number;
                        type: "eip4844";
                        gasPrice?: undefined;
                        maxFeePerBlobGas: bigint;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList: import("viem/experimental").SignedAuthorizationList;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip7702";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) & {};
                    type: "transaction";
                };
                readonly transactionReceipt: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").OpStackRpcTransactionReceipt) => {
                        blobGasPrice?: bigint | undefined;
                        blobGasUsed?: bigint | undefined;
                        blockHash: import("viem").Hash;
                        blockNumber: bigint;
                        contractAddress: import("abitype").Address | null | undefined;
                        cumulativeGasUsed: bigint;
                        effectiveGasPrice: bigint;
                        from: import("abitype").Address;
                        gasUsed: bigint;
                        logs: import("viem").Log<bigint, number, false>[];
                        logsBloom: import("viem").Hex;
                        root?: import("viem").Hash | undefined;
                        status: "success" | "reverted";
                        to: import("abitype").Address | null;
                        transactionHash: import("viem").Hash;
                        transactionIndex: number;
                        type: import("viem").TransactionType;
                        l1GasPrice: bigint | null;
                        l1GasUsed: bigint | null;
                        l1Fee: bigint | null;
                        l1FeeScalar: number | null;
                    } & {};
                    type: "transactionReceipt";
                };
            };
            serializers: {
                readonly transaction: typeof import("viem/chains").serializeTransactionOpStack;
            };
        };
    };
    arbitrumSepolia: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://sepolia.arbiscan.io";
                    readonly apiUrl: "https://api-sepolia.arbiscan.io/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 81930;
                };
            };
            id: 421614;
            name: "Arbitrum Sepolia";
            nativeCurrency: {
                readonly name: "Arbitrum Sepolia Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://sepolia-rollup.arbitrum.io/rpc"];
                };
            };
            sourceId?: number | undefined;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    polygonMumbai: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "PolygonScan";
                    readonly url: "https://mumbai.polygonscan.com";
                    readonly apiUrl: "https://api-testnet.polygonscan.com/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 25770160;
                };
            };
            id: 80001;
            name: "Polygon Mumbai";
            nativeCurrency: {
                readonly name: "MATIC";
                readonly symbol: "MATIC";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/polygon_mumbai"];
                };
            };
            sourceId?: number | undefined;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    gnosis: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Gnosisscan";
                    readonly url: "https://gnosisscan.io";
                    readonly apiUrl: "https://api.gnosisscan.io/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 21022491;
                };
            };
            id: 100;
            name: "Gnosis";
            nativeCurrency: {
                readonly decimals: 18;
                readonly name: "xDAI";
                readonly symbol: "XDAI";
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.gnosischain.com"];
                    readonly webSocket: readonly ["wss://rpc.gnosischain.com/wss"];
                };
            };
            sourceId?: number | undefined;
            testnet?: boolean | undefined;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    degen: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Degen Chain Explorer";
                    readonly url: "https://explorer.degen.tips";
                    readonly apiUrl: "https://explorer.degen.tips/api/v2";
                };
            };
            contracts?: import("viem").Prettify<{
                [key: string]: import("viem").ChainContract | {
                    [sourceId: number]: import("viem").ChainContract | undefined;
                } | undefined;
            } & {
                ensRegistry?: import("viem").ChainContract | undefined;
                ensUniversalResolver?: import("viem").ChainContract | undefined;
                multicall3?: import("viem").ChainContract | undefined;
                universalSignatureVerifier?: import("viem").ChainContract | undefined;
            }> | undefined;
            id: 666666666;
            name: "Degen";
            nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Degen";
                readonly symbol: "DEGEN";
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.degen.tips"];
                    readonly webSocket: readonly ["wss://rpc.degen.tips"];
                };
            };
            sourceId?: number | undefined;
            testnet?: boolean | undefined;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    cyber: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Blockscout";
                    readonly url: "https://cyberscan.co";
                    readonly apiUrl: "https://cyberscan.co/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                    readonly blockCreated: 0;
                };
            };
            id: 7560;
            name: "Cyber";
            nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://cyber.alt.technology"];
                };
            };
            sourceId?: number | undefined;
            testnet?: boolean | undefined;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    arbitrum: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                    readonly apiUrl: "https://api.arbiscan.io/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
            id: 42161;
            name: "Arbitrum One";
            nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            sourceId?: number | undefined;
            testnet?: boolean | undefined;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    celo: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Celo Explorer";
                    readonly url: "https://celoscan.io";
                    readonly apiUrl: "https://api.celoscan.io/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                    readonly blockCreated: 13112599;
                };
            };
            id: 42220;
            name: "Celo";
            nativeCurrency: {
                readonly decimals: 18;
                readonly name: "CELO";
                readonly symbol: "CELO";
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://forno.celo.org"];
                };
            };
            sourceId?: number | undefined;
            testnet: false;
            custom?: Record<string, unknown> | undefined;
            fees: import("viem").ChainFees<{
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").CeloRpcBlock) => {
                        baseFeePerGas: bigint | null;
                        blobGasUsed: bigint;
                        difficulty: bigint | undefined;
                        excessBlobGas: bigint;
                        extraData: import("viem").Hex;
                        gasLimit: bigint | undefined;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: import("abitype").Address;
                        nonce: bigint | null | undefined;
                        number: bigint | null;
                        parentBeaconBlockRoot?: import("viem").Hex | undefined;
                        parentHash: import("viem").Hash;
                        receiptsRoot: import("viem").Hex;
                        sealFields: import("viem").Hex[];
                        sha3Uncles: import("viem").Hash;
                        size: bigint;
                        stateRoot: import("viem").Hash;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/chains").CeloTransaction<boolean>[];
                        transactionsRoot: import("viem").Hash;
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: import("viem").Hex | undefined;
                        mixHash?: undefined;
                        randomness?: {
                            committed: import("viem").Hex;
                            revealed: import("viem").Hex;
                        } | undefined;
                        uncles?: undefined;
                    } & {};
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").CeloRpcTransaction) => ({
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        v: bigint;
                        to: import("abitype").Address | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        nonce: number;
                        value: bigint;
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip2930";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip1559";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes: readonly import("viem").Hex[];
                        chainId: number;
                        type: "eip4844";
                        gasPrice?: undefined;
                        maxFeePerBlobGas: bigint;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList: import("viem/experimental").SignedAuthorizationList;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip7702";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        feeCurrency: import("abitype").Address | null;
                        gatewayFee: bigint | null;
                        gatewayFeeRecipient: import("abitype").Address | null;
                        type: "cip42";
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        feeCurrency: import("abitype").Address | null;
                        type: "cip64";
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: boolean;
                        mint?: bigint | undefined;
                        sourceHash: import("viem").Hex;
                        type: "deposit";
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: undefined;
                        feeCurrency?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    }) & {};
                    type: "transaction";
                };
                readonly transactionRequest: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").CeloTransactionRequest) => ({
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x0" | undefined;
                        value?: `0x${string}` | undefined;
                        gasPrice?: `0x${string}` | undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        blobs?: undefined;
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x1" | undefined;
                        value?: `0x${string}` | undefined;
                        gasPrice?: `0x${string}` | undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        accessList?: import("viem").AccessList | undefined;
                        blobs?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x2" | undefined;
                        value?: `0x${string}` | undefined;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        accessList?: import("viem").AccessList | undefined;
                        blobs?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        type?: "0x3" | undefined;
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        value?: `0x${string}` | undefined;
                        to: `0x${string}` | null;
                        gasPrice?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        maxFeePerBlobGas: `0x${string}`;
                        accessList?: import("viem").AccessList | undefined;
                        blobs: readonly import("viem").Hex[] | readonly import("viem").ByteArray[];
                        blobVersionedHashes?: readonly import("viem").Hex[] | undefined;
                        kzg?: import("viem").Kzg | undefined;
                        sidecars?: readonly import("viem").BlobSidecar<import("viem").Hex>[] | undefined;
                        authorizationList?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        type?: "0x4" | undefined;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        value?: `0x${string}` | undefined;
                        accessList?: import("viem").AccessList | undefined;
                        authorizationList?: import("viem/experimental").RpcAuthorizationList | undefined;
                        blobs?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x7b" | undefined;
                        value?: `0x${string}` | undefined;
                        accessList?: import("viem").AccessList | undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        blobs?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                    }) & {};
                    type: "transactionRequest";
                };
            }>;
            formatters: {
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").CeloRpcBlock) => {
                        baseFeePerGas: bigint | null;
                        blobGasUsed: bigint;
                        difficulty: bigint | undefined;
                        excessBlobGas: bigint;
                        extraData: import("viem").Hex;
                        gasLimit: bigint | undefined;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: import("abitype").Address;
                        nonce: bigint | null | undefined;
                        number: bigint | null;
                        parentBeaconBlockRoot?: import("viem").Hex | undefined;
                        parentHash: import("viem").Hash;
                        receiptsRoot: import("viem").Hex;
                        sealFields: import("viem").Hex[];
                        sha3Uncles: import("viem").Hash;
                        size: bigint;
                        stateRoot: import("viem").Hash;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/chains").CeloTransaction<boolean>[];
                        transactionsRoot: import("viem").Hash;
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: import("viem").Hex | undefined;
                        mixHash?: undefined;
                        randomness?: {
                            committed: import("viem").Hex;
                            revealed: import("viem").Hex;
                        } | undefined;
                        uncles?: undefined;
                    } & {};
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").CeloRpcTransaction) => ({
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        v: bigint;
                        to: import("abitype").Address | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        nonce: number;
                        value: bigint;
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip2930";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip1559";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes: readonly import("viem").Hex[];
                        chainId: number;
                        type: "eip4844";
                        gasPrice?: undefined;
                        maxFeePerBlobGas: bigint;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList: import("viem/experimental").SignedAuthorizationList;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip7702";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        feeCurrency: import("abitype").Address | null;
                        gatewayFee: bigint | null;
                        gatewayFeeRecipient: import("abitype").Address | null;
                        type: "cip42";
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        feeCurrency: import("abitype").Address | null;
                        type: "cip64";
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: boolean;
                        mint?: bigint | undefined;
                        sourceHash: import("viem").Hex;
                        type: "deposit";
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: undefined;
                        feeCurrency?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    }) & {};
                    type: "transaction";
                };
                readonly transactionRequest: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").CeloTransactionRequest) => ({
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x0" | undefined;
                        value?: `0x${string}` | undefined;
                        gasPrice?: `0x${string}` | undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        blobs?: undefined;
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x1" | undefined;
                        value?: `0x${string}` | undefined;
                        gasPrice?: `0x${string}` | undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        accessList?: import("viem").AccessList | undefined;
                        blobs?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x2" | undefined;
                        value?: `0x${string}` | undefined;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        accessList?: import("viem").AccessList | undefined;
                        blobs?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        type?: "0x3" | undefined;
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        value?: `0x${string}` | undefined;
                        to: `0x${string}` | null;
                        gasPrice?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        maxFeePerBlobGas: `0x${string}`;
                        accessList?: import("viem").AccessList | undefined;
                        blobs: readonly import("viem").Hex[] | readonly import("viem").ByteArray[];
                        blobVersionedHashes?: readonly import("viem").Hex[] | undefined;
                        kzg?: import("viem").Kzg | undefined;
                        sidecars?: readonly import("viem").BlobSidecar<import("viem").Hex>[] | undefined;
                        authorizationList?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        type?: "0x4" | undefined;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        value?: `0x${string}` | undefined;
                        accessList?: import("viem").AccessList | undefined;
                        authorizationList?: import("viem/experimental").RpcAuthorizationList | undefined;
                        blobs?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x7b" | undefined;
                        value?: `0x${string}` | undefined;
                        accessList?: import("viem").AccessList | undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        blobs?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                    }) & {};
                    type: "transactionRequest";
                };
            };
            serializers: {
                readonly transaction: typeof import("viem/chains").serializeTransactionCelo;
            };
        };
    };
    celoAlfajores: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Celo Alfajores Explorer";
                    readonly url: "https://celo-alfajores.blockscout.com";
                    readonly apiUrl: "https://celo-alfajores.blockscout.com/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                    readonly blockCreated: 14569001;
                };
                readonly portal: {
                    readonly 17000: {
                        readonly address: "0x82527353927d8D069b3B452904c942dA149BA381";
                        readonly blockCreated: 2411324;
                    };
                };
                readonly disputeGameFactory: {
                    readonly 17000: {
                        readonly address: "0xE28AAdcd9883746c0e5068F58f9ea06027b214cb";
                        readonly blockCreated: 2411324;
                    };
                };
                readonly l2OutputOracle: {
                    readonly 17000: {
                        readonly address: "0x4a2635e9e4f6e45817b1D402ac4904c1d1752438";
                        readonly blockCreated: 2411324;
                    };
                };
                readonly l1StandardBridge: {
                    readonly 17000: {
                        readonly address: "0xD1B0E0581973c9eB7f886967A606b9441A897037";
                        readonly blockCreated: 2411324;
                    };
                };
                readonly gasPriceOracle: {
                    readonly address: "0x420000000000000000000000000000000000000F";
                };
                readonly l1Block: {
                    readonly address: "0x4200000000000000000000000000000000000015";
                };
                readonly l2CrossDomainMessenger: {
                    readonly address: "0x4200000000000000000000000000000000000007";
                };
                readonly l2Erc721Bridge: {
                    readonly address: "0x4200000000000000000000000000000000000014";
                };
                readonly l2StandardBridge: {
                    readonly address: "0x4200000000000000000000000000000000000010";
                };
                readonly l2ToL1MessagePasser: {
                    readonly address: "0x4200000000000000000000000000000000000016";
                };
            };
            id: 44787;
            name: "Alfajores";
            nativeCurrency: {
                readonly decimals: 18;
                readonly name: "CELO";
                readonly symbol: "A-CELO";
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://alfajores-forno.celo-testnet.org"];
                };
            };
            sourceId?: number | undefined;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees: import("viem").ChainFees<{
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").CeloRpcBlock) => {
                        baseFeePerGas: bigint | null;
                        blobGasUsed: bigint;
                        difficulty: bigint | undefined;
                        excessBlobGas: bigint;
                        extraData: import("viem").Hex;
                        gasLimit: bigint | undefined;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: import("abitype").Address;
                        nonce: bigint | null | undefined;
                        number: bigint | null;
                        parentBeaconBlockRoot?: import("viem").Hex | undefined;
                        parentHash: import("viem").Hash;
                        receiptsRoot: import("viem").Hex;
                        sealFields: import("viem").Hex[];
                        sha3Uncles: import("viem").Hash;
                        size: bigint;
                        stateRoot: import("viem").Hash;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/chains").CeloTransaction<boolean>[];
                        transactionsRoot: import("viem").Hash;
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: import("viem").Hex | undefined;
                        mixHash?: undefined;
                        randomness?: {
                            committed: import("viem").Hex;
                            revealed: import("viem").Hex;
                        } | undefined;
                        uncles?: undefined;
                    } & {};
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").CeloRpcTransaction) => ({
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        v: bigint;
                        to: import("abitype").Address | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        nonce: number;
                        value: bigint;
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip2930";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip1559";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes: readonly import("viem").Hex[];
                        chainId: number;
                        type: "eip4844";
                        gasPrice?: undefined;
                        maxFeePerBlobGas: bigint;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList: import("viem/experimental").SignedAuthorizationList;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip7702";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        feeCurrency: import("abitype").Address | null;
                        gatewayFee: bigint | null;
                        gatewayFeeRecipient: import("abitype").Address | null;
                        type: "cip42";
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        feeCurrency: import("abitype").Address | null;
                        type: "cip64";
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: boolean;
                        mint?: bigint | undefined;
                        sourceHash: import("viem").Hex;
                        type: "deposit";
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: undefined;
                        feeCurrency?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    }) & {};
                    type: "transaction";
                };
                readonly transactionRequest: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").CeloTransactionRequest) => ({
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x0" | undefined;
                        value?: `0x${string}` | undefined;
                        gasPrice?: `0x${string}` | undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        blobs?: undefined;
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x1" | undefined;
                        value?: `0x${string}` | undefined;
                        gasPrice?: `0x${string}` | undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        accessList?: import("viem").AccessList | undefined;
                        blobs?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x2" | undefined;
                        value?: `0x${string}` | undefined;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        accessList?: import("viem").AccessList | undefined;
                        blobs?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        type?: "0x3" | undefined;
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        value?: `0x${string}` | undefined;
                        to: `0x${string}` | null;
                        gasPrice?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        maxFeePerBlobGas: `0x${string}`;
                        accessList?: import("viem").AccessList | undefined;
                        blobs: readonly import("viem").Hex[] | readonly import("viem").ByteArray[];
                        blobVersionedHashes?: readonly import("viem").Hex[] | undefined;
                        kzg?: import("viem").Kzg | undefined;
                        sidecars?: readonly import("viem").BlobSidecar<import("viem").Hex>[] | undefined;
                        authorizationList?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        type?: "0x4" | undefined;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        value?: `0x${string}` | undefined;
                        accessList?: import("viem").AccessList | undefined;
                        authorizationList?: import("viem/experimental").RpcAuthorizationList | undefined;
                        blobs?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x7b" | undefined;
                        value?: `0x${string}` | undefined;
                        accessList?: import("viem").AccessList | undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        blobs?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                    }) & {};
                    type: "transactionRequest";
                };
            }>;
            formatters: {
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").CeloRpcBlock) => {
                        baseFeePerGas: bigint | null;
                        blobGasUsed: bigint;
                        difficulty: bigint | undefined;
                        excessBlobGas: bigint;
                        extraData: import("viem").Hex;
                        gasLimit: bigint | undefined;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: import("abitype").Address;
                        nonce: bigint | null | undefined;
                        number: bigint | null;
                        parentBeaconBlockRoot?: import("viem").Hex | undefined;
                        parentHash: import("viem").Hash;
                        receiptsRoot: import("viem").Hex;
                        sealFields: import("viem").Hex[];
                        sha3Uncles: import("viem").Hash;
                        size: bigint;
                        stateRoot: import("viem").Hash;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/chains").CeloTransaction<boolean>[];
                        transactionsRoot: import("viem").Hash;
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: import("viem").Hex | undefined;
                        mixHash?: undefined;
                        randomness?: {
                            committed: import("viem").Hex;
                            revealed: import("viem").Hex;
                        } | undefined;
                        uncles?: undefined;
                    } & {};
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").CeloRpcTransaction) => ({
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        v: bigint;
                        to: import("abitype").Address | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        nonce: number;
                        value: bigint;
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip2930";
                        gasPrice: bigint;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip1559";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList?: undefined;
                        blobVersionedHashes: readonly import("viem").Hex[];
                        chainId: number;
                        type: "eip4844";
                        gasPrice?: undefined;
                        maxFeePerBlobGas: bigint;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        accessList: import("viem").AccessList;
                        authorizationList: import("viem/experimental").SignedAuthorizationList;
                        blobVersionedHashes?: undefined;
                        chainId: number;
                        type: "eip7702";
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        feeCurrency: import("abitype").Address | null;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        feeCurrency: import("abitype").Address | null;
                        gatewayFee: bigint | null;
                        gatewayFeeRecipient: import("abitype").Address | null;
                        type: "cip42";
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        feeCurrency: import("abitype").Address | null;
                        type: "cip64";
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        mint?: undefined;
                        isSystemTx?: undefined;
                        sourceHash?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: import("abitype").Address;
                        gas: bigint;
                        hash: import("viem").Hash;
                        input: import("viem").Hex;
                        nonce: number;
                        r: import("viem").Hex;
                        s: import("viem").Hex;
                        to: import("abitype").Address | null;
                        transactionIndex: number | null;
                        typeHex: import("viem").Hex | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        isSystemTx?: boolean;
                        mint?: bigint | undefined;
                        sourceHash: import("viem").Hex;
                        type: "deposit";
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        chainId?: undefined;
                        feeCurrency?: undefined;
                        gatewayFee?: undefined;
                        gatewayFeeRecipient?: undefined;
                    }) & {};
                    type: "transaction";
                };
                readonly transactionRequest: {
                    exclude: [] | undefined;
                    format: (args: import("viem/chains").CeloTransactionRequest) => ({
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x0" | undefined;
                        value?: `0x${string}` | undefined;
                        gasPrice?: `0x${string}` | undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        blobs?: undefined;
                        accessList?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x1" | undefined;
                        value?: `0x${string}` | undefined;
                        gasPrice?: `0x${string}` | undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        accessList?: import("viem").AccessList | undefined;
                        blobs?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x2" | undefined;
                        value?: `0x${string}` | undefined;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        accessList?: import("viem").AccessList | undefined;
                        blobs?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        type?: "0x3" | undefined;
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        value?: `0x${string}` | undefined;
                        to: `0x${string}` | null;
                        gasPrice?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        maxFeePerBlobGas: `0x${string}`;
                        accessList?: import("viem").AccessList | undefined;
                        blobs: readonly import("viem").Hex[] | readonly import("viem").ByteArray[];
                        blobVersionedHashes?: readonly import("viem").Hex[] | undefined;
                        kzg?: import("viem").Kzg | undefined;
                        sidecars?: readonly import("viem").BlobSidecar<import("viem").Hex>[] | undefined;
                        authorizationList?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        type?: "0x4" | undefined;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        value?: `0x${string}` | undefined;
                        accessList?: import("viem").AccessList | undefined;
                        authorizationList?: import("viem/experimental").RpcAuthorizationList | undefined;
                        blobs?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                    } | {
                        data?: import("viem").Hex | undefined;
                        from?: import("abitype").Address | undefined;
                        gas?: `0x${string}` | undefined;
                        nonce?: `0x${string}` | undefined;
                        to?: import("abitype").Address | null | undefined;
                        type?: "0x7b" | undefined;
                        value?: `0x${string}` | undefined;
                        accessList?: import("viem").AccessList | undefined;
                        feeCurrency?: import("abitype").Address | undefined;
                        gasPrice?: undefined;
                        maxFeePerBlobGas?: undefined;
                        maxFeePerGas?: `0x${string}` | undefined;
                        maxPriorityFeePerGas?: `0x${string}` | undefined;
                        blobs?: undefined;
                        authorizationList?: undefined;
                        blobVersionedHashes?: undefined;
                        kzg?: undefined;
                        sidecars?: undefined;
                    }) & {};
                    type: "transactionRequest";
                };
            };
            serializers: {
                readonly transaction: typeof import("viem/chains").serializeTransactionCelo;
            };
        };
    };
    plume: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Blockscout";
                    readonly url: "https://explorer.plumenetwork.xyz";
                    readonly apiUrl: "https://explorer.plumenetwork.xyz/api";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 48577;
                };
            };
            id: 98865;
            name: "Plume";
            nativeCurrency: {
                readonly name: "Plume Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.plumenetwork.xyz"];
                    readonly webSocket: readonly ["wss://rpc.plumenetwork.xyz"];
                };
            };
            sourceId: 1;
            testnet?: boolean | undefined;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
    monadTestnet: {
        address: Address;
        chain: {
            blockExplorers: {
                readonly default: {
                    readonly name: "Monad Testnet explorer";
                    readonly url: "https://testnet.monadexplorer.com";
                };
            };
            contracts: {
                readonly multicall3: {
                    readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                    readonly blockCreated: 251449;
                };
            };
            id: 10143;
            name: "Monad Testnet";
            nativeCurrency: {
                readonly name: "Testnet MON Token";
                readonly symbol: "MON";
                readonly decimals: 18;
            };
            rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://testnet-rpc.monad.xyz"];
                };
            };
            sourceId?: number | undefined;
            testnet: true;
            custom?: Record<string, unknown> | undefined;
            fees?: import("viem").ChainFees<undefined> | undefined;
            formatters?: undefined;
            serializers?: import("viem").ChainSerializers<undefined, import("viem").TransactionSerializable> | undefined;
        };
    };
};
export declare const chainInfo: {
    evm: {
        name: string;
        chain: EvmChains;
        icon: string;
        scanUrl: string;
        id: string;
        chainInfo: any;
        isTestnet?: boolean;
    }[];
    offchain: {
        chain: DataLocationOffChain;
        id: DataLocationOffChain;
        icon: string;
        name: string;
        scanUrl: string;
        isTestnet?: boolean;
    }[];
};
//# sourceMappingURL=constants.d.ts.map