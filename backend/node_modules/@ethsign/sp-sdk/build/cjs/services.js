"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveSchemaToStorage = exports.getOffChainStorageData = exports.saveDataToStorage = exports.getDataFromStorage = void 0;
const types_1 = require("./types");
const offChain_1 = require("./types/offChain");
const utils_1 = require("./utils");
const tools_1 = require("./utils/tools");
const getDataFromStorage = async (data) => {
    return (0, utils_1.request)(`${offChain_1.OffChainRpc.mainnet}/sp/storage-data?dataId=${data.dataId}&dataLocation=${data.dataLocation === types_1.DataLocationOnChain.ARWEAVE ? 'arweave' : 'ipfs'}`);
};
exports.getDataFromStorage = getDataFromStorage;
const saveDataToStorage = async (data, storageType, apiKey) => {
    if (!apiKey) {
        (0, tools_1.throwApikeyError)();
    }
    const res = await (0, utils_1.request)(`${offChain_1.OffChainRpc.mainnet}/sp/offchain-storage`, {
        headers: {
            'x-sign-api-key': apiKey,
        },
        method: 'POST',
        body: JSON.stringify({ data, storageType }),
    });
    if (!res?.data?.cid) {
        throw new Error('save data to storage failed');
    }
    return res?.data?.cid;
};
exports.saveDataToStorage = saveDataToStorage;
const getOffChainStorageData = async (data) => {
    const res = await (0, utils_1.request)(`${offChain_1.OffChainRpc.mainnet}/sp/offchain-storage?${(0, utils_1.stringifyQueryString)(data)}`, {});
    return JSON.parse(res.data);
};
exports.getOffChainStorageData = getOffChainStorageData;
const saveSchemaToStorage = async (data) => {
    if (!data.apiKey) {
        (0, tools_1.throwApikeyError)();
    }
    const res = await (0, utils_1.request)(`${offChain_1.OffChainRpc.mainnet}/sp/save-schema-data`, {
        headers: {
            'x-sign-api-key': data.apiKey || '',
        },
        body: JSON.stringify({
            dataLocation: data.dataLocation,
            name: data.name,
            description: data.description,
            data: data.data,
        }),
        method: 'POST',
    });
    if (!res?.data?.cid) {
        throw new Error('save data to storage failed');
    }
    return res?.data?.cid;
};
exports.saveSchemaToStorage = saveSchemaToStorage;
//# sourceMappingURL=services.js.map