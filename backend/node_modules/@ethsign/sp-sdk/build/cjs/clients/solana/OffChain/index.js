"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaOffChainClient = void 0;
const types_1 = require("../../../types");
const OffChainClientBase_1 = require("../../../interface/OffChainClientBase");
const ed = __importStar(require("@noble/ed25519"));
const bs58_1 = __importDefault(require("bs58"));
class SolanaOffChainClient extends OffChainClientBase_1.OffChainClientBase {
    walletClient;
    keyPair;
    constructor(options) {
        super({
            chainType: types_1.ChainType.solana,
            signType: options.signType,
            rpcUrl: options.rpcUrl,
            apiKey: options.apiKey,
        });
        if ('walletClient' in options) {
            this.walletClient = options.walletClient;
        }
        else {
            this.keyPair = options.account;
        }
    }
    async getAccount() {
        if (this.keyPair) {
            const address = this.keyPair.publicKey.toBase58();
            return {
                address: address,
            };
        }
        else {
            return { address: this.walletClient.publicKey.toBase58() };
        }
    }
    async signMessage(message) {
        const messageBytes = new TextEncoder().encode(message);
        const signMessage = this.keyPair
            ? await ed.sign(messageBytes, this.keyPair.secretKey.slice(0, 32))
            : await this.walletClient.signMessage(messageBytes);
        const account = await this.getAccount();
        return {
            signature: bs58_1.default.encode(signMessage),
            message: message,
            publicKey: account.address,
        };
    }
    signTypedData(data) {
        throw new Error('Method not implemented.');
    }
}
exports.SolanaOffChainClient = SolanaOffChainClient;
//# sourceMappingURL=index.js.map