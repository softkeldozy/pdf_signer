import {
  ChainType,
  SpMode,
  OnChainClientOptions,
  OffChainClientOptions,
  OffChainSignType,
} from '../types';
import { SignProtocolClientBase } from '../interface/SignProtocolClientBase';
import {
  EVMOnChainClient,
  EVMOffChainClient,
  EvmChains,
  EVMOffChainClientOptions,
} from './evm';
import { SolanaOffChainClient, SolanaOffChainClientOptions } from './solana';
import { TonOffChainClient, TonOffChainClientOptions } from './ton';

export function getClient(
  mode: SpMode,
  options: OnChainClientOptions | OffChainClientOptions
): SignProtocolClientBase {
  if (mode === SpMode.OffChain) {
    const offChainOptions = options as OffChainClientOptions;
    switch (offChainOptions.signType) {
      case OffChainSignType.EvmEip712:
        return new EVMOffChainClient(offChainOptions);
      case OffChainSignType.Solana:
        return new SolanaOffChainClient(offChainOptions);
      case OffChainSignType.TonConnect:
        return new TonOffChainClient(offChainOptions);
      default:
        throw new Error('ChainType not supported');
    }
  } else {
    const { chain } = options as OnChainClientOptions;
    switch (chain) {
      case EvmChains[chain]:
        return new EVMOnChainClient(options as OnChainClientOptions);
      default:
        throw new Error('ChainType not supported');
    }
  }
}
