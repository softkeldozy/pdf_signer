import React, { useState, useEffect, useMemo } from 'react';
import './index.css';
import { apiKey, myPrivateKey, solanaPrivateKey, tonmemo } from './config';
import '@solana/wallet-adapter-react-ui/styles.css';
import '@rainbow-me/rainbowkit/styles.css';
import {
  Card,
  Form,
  Input,
  Select,
  Button,
  Space,
  Typography,
  Spin,
} from 'antd';
import { CopyOutlined, LoadingOutlined } from '@ant-design/icons';

import { mnemonicToPrivateKey } from '@ton/crypto';
import { privateKeyToAccount } from 'viem/accounts';

import {
  THEME,
  TonConnectUIProvider,
  TonConnectButton,
  useTonConnectUI,
} from '@tonconnect/ui-react';
import {
  createWalletClient,
  encodeAbiParameters,
  parseUnits,
  WalletClient,
} from 'viem';
import {
  ConnectionProvider,
  useConnection,
  WalletProvider,
  useWallet,
  useAnchorWallet,
} from '@solana/wallet-adapter-react';
import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-wallets';
import {
  WalletModalProvider,
  WalletDisconnectButton,
  WalletMultiButton,
} from '@solana/wallet-adapter-react-ui';
import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';
import {
  DataLocationOffChain,
  EvmChains,
  OffChainRpc,
  OffChainSignType,
  OnChainAttestation,
  SignProtocolClient,
  SpMode,
  delegateSignAttestation,
  delegateSignRevokeAttestation,
  delegateSignSchema,
  IndexService,
  RecipientEncodingType,
  Schema,
  OffChainSchema,
  DataLocationOnChain,
  OnChainSchema,
} from '../../../build/esm';
import { polygonMumbai } from 'viem/chains';
import { Keypair } from '@solana/web3.js';
import bs58 from 'bs58';
import { Log } from 'ethers';
import {
  getDefaultConfig,
  RainbowKitProvider,
  ConnectButton,
} from '@rainbow-me/rainbowkit';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { WagmiProvider, http, useWalletClient } from 'wagmi';
import { mainnet, sepolia } from 'wagmi/chains';

const queryClient = new QueryClient();

const config = getDefaultConfig({
  appName: 'Sign Protocol Demo',
  projectId: 'YOUR_PROJECT_ID',
  chains: [mainnet, sepolia],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
});

const rainbowKitConfig = {
  theme: {
    lightMode: {
      background: '#ffffff',
      text: '#1a1a1a',
    },
    darkMode: {
      background: '#1a1a1a',
      text: '#ffffff',
    },
  },
};

export const GettingStarted: React.FC = () => {
  const [result, setResult] = useState<any>(null);
  const [chainType, setChainType] = useState<'evm' | 'solana' | 'ton'>('evm');
  const [privateKey, setPrivateKey] = useState<any>(myPrivateKey);
  const [schemaId, setSchemaId] = useState<any>('0x337');
  const [attestationId, setAttestationId] = useState<any>('0x437');
  const solanaWallet = useWallet();
  const [tonConnectUI] = useTonConnectUI();
  console.log('tonConnectUI', tonConnectUI);
  const { data } = useWalletClient();
  const [schema, setSchema] = useState<any>(
    JSON.stringify({
      name: 'test',
      description: '',
      data: [
        {
          name: 'name',
          type: 'string',
        },
      ],
      revocable: true,
      // hook: '0x469EbEC8E2216c5f1986174b868df9bF9131fbcd',
      dataLocation: DataLocationOnChain.ARWEAVE,
    } as OnChainSchema)
  );
  const [attestation, setAttestation] = useState<any>(
    JSON.stringify({
      schemaId: '0x9f19',
      data: {
        test: 'test',
      },
      indexingValue: 'xxx',
      recipients: ['0x059e6B8008d34aC26581fD3ED8378AA93c7941EE'],
      // linkedAttestationId: '0x12e',
      dataLocation: DataLocationOnChain.ARWEAVE,
    } as OnChainAttestation)
  );
  const [offChainClient, setOffChainClient] = useState<SignProtocolClient>();
  const [onChainClient, setOnChainClient] = useState<SignProtocolClient>();
  useEffect(() => {
    initializeClients();
  }, [chainType, solanaWallet, tonConnectUI]);

  const initializeClients = async () => {
    if (chainType === 'evm') {
      const offChainClient = new SignProtocolClient(SpMode.OffChain, {
        signType: OffChainSignType.EvmEip712,
        rpcUrl: 'http://3.89.178.45:3020/api',
        apiKey: apiKey,
        //account: privateKeyToAccount(privateKey),
        walletClient: data as WalletClient,
      });

      setOffChainClient(offChainClient);
      const onChainClient = new SignProtocolClient(SpMode.OnChain, {
        chain: EvmChains.sepolia,
        apiKey: apiKey,
      });
      setOnChainClient(onChainClient);
    } else if (chainType === 'solana') {
      const privateKey = solanaPrivateKey;

      const bs58PrivateKey = bs58.decode(privateKey);
      const offChainClient = new SignProtocolClient(SpMode.OffChain, {
        signType: OffChainSignType.Solana,
        rpcUrl: 'http://3.89.178.45:3020/api',
        account: Keypair.fromSecretKey(bs58PrivateKey),
        apiKey: apiKey,
      });
      setOffChainClient(offChainClient);
    } else {
      const keypair = await mnemonicToPrivateKey(tonmemo.split(' '));
      const offChainClient = new SignProtocolClient(SpMode.OffChain, {
        rpcUrl: 'http://3.89.178.45:3020/api',
        signType: OffChainSignType.TonConnect,
        account: keypair,
        walletAddress: 'UQDZzYCeTa3udXVGR-LPri0E-lGDH4sx5VOemNRbyF5IJ_Sy',
        walletClient: tonConnectUI,
        apiKey: apiKey,
      });
      setOffChainClient(offChainClient);
    }
  };

  const getSchemaOffChain = async () => {
    const client = offChainClient;
    const res = await client.getSchema(schemaId);
    setResult(res);
  };
  const getSchemaOnChain = async () => {
    const client = onChainClient;
    const res = await client.getSchema(schemaId);
    setResult(res);
  };

  const getAttestationOffChain = async () => {
    const attestationId = 'SPA_nxuvnshAptcDS2kjNRRYc';
    const client = offChainClient;
    const res = await client.getAttestation(attestationId);
    setResult(res);
  };

  const getAttestationOnChain = async () => {
    const client = onChainClient;
    const res = await client.getAttestation(attestationId);
    console.log(res);
    setResult(res);
  };
  const createSchema = async () => {
    const client: SignProtocolClient = offChainClient;
    try {
      const res = await client.createSchema(JSON.parse(schema));
      setResult(res);
    } catch (error) {
      console.log(error);
    }
  };
  const createAttestation = async () => {
    const client = offChainClient;
    const res = await client.createAttestation(JSON.parse(attestation));
    setResult(res);
  };

  async function createSchemaOnChain() {
    const client = onChainClient;
    // const info = await delegateSignSchema(JSON.parse(schema), {
    //   chain: EvmChains.polygonMumbai,
    //   delegationAccount: privateKey
    //     ? privateKeyToAccount(privateKey)
    //     : undefined,
    // })
    const res = await client.createSchema(JSON.parse(schema), {
      // delegationSignature: info.delegationSignature,
    });
    setResult(res);
  }

  async function createAttestationOnChain() {
    /*   const info = await delegateSignAttestation(JSON.parse(attestation), {
      chain: EvmChains.sepolia,
      apiKey: apiKey,
    }); */
    const client = onChainClient as SignProtocolClient;

    const res = await client.createAttestation(JSON.parse(attestation), {
      //resolverFeesETH: BigInt(10000),
      // recipientEncodingType: RecipientEncodingType.Address,
      // extraData: encodeAbiParameters([{ type: 'uint256' }], [BigInt(2)]),
      //resolverFeesERC20Token: '0x01ed09aE64cfE7417760D0B4581e5D9776e56fd7',
      //resolverFeesERC20Amount: parseUnits('100', 18),
      //delegationSignature: info.delegationSignature,
      // getTxHash(txHash) {
      //   console.log('txHash', txHash);
      // },
      //recipientEncodingType: RecipientEncodingType.Address,
      // delegationAccount: privateKeyToAccount(privateKey),
      // extraData: '0x1234',
    });
    setResult(res);

    // const res = await client!.createAttestation(JSON.parse(attestation))
  }

  async function revokeAttestationOnChain() {
    const client = onChainClient as SignProtocolClient;
    const info = await delegateSignRevokeAttestation(attestationId, {
      chain: EvmChains.sepolia,
      reason: 'test',
    });
    const res = await client!.revokeAttestation(attestationId, {
      reason: 'test',
      delegationSignature: info.delegationSignature,
    });
    setResult(res);
  }

  async function revokeAttestation() {
    const client = offChainClient;

    const res = await client!.revokeAttestation(attestationId, {
      reason: 'test revoke',
    });

    setResult(res);
  }
  async function getSchemaListFromIndexService() {
    const indexService = new IndexService('testnet');
    const res = await indexService.querySchemaList({ page: 1 });
    setResult(res);
  }

  async function getSchemaFromIndexService() {
    const indexService = new IndexService('testnet');
    const res = await indexService.querySchema('SPS_lgX_25pVykYTKKZhRUGI3');
    setResult(res);
  }

  async function getAttestationListFromIndexService() {
    const indexService = new IndexService('testnet');
    const res = await indexService.queryAttestationList({ page: 1 });
    setResult(res);
  }
  async function getAttestationFromIndexService() {
    const indexService = new IndexService('testnet');
    const res = await indexService.queryAttestation('onchain_evm_80001_0x1');
    setResult(res);
  }

  return (
    <div style={{ padding: '24px' }}>
      <Space direction='vertical' size='large' style={{ width: '100%' }}>
        <Card title='Basic Configuration'>
          <Form layout='vertical'>
            <Form.Item label='Chain Type'>
              <Space>
                <Select
                  value={chainType}
                  onChange={(value) => setChainType(value)}
                  style={{ width: 120 }}
                >
                  <Select.Option value='evm'>EVM</Select.Option>
                  <Select.Option value='solana'>Solana</Select.Option>
                  <Select.Option value='ton'>Ton</Select.Option>
                </Select>
                {chainType === 'evm' ? (
                  <ConnectButton />
                ) : chainType === 'solana' ? (
                  <WalletMultiButton />
                ) : (
                  <TonConnectButton />
                )}
              </Space>
            </Form.Item>
            <Form.Item label='Private Key'>
              <Input.Password
                value={privateKey}
                onChange={(e) => setPrivateKey(e.target.value)}
              />
            </Form.Item>
            <Form.Item label='Schema ID'>
              <Input
                value={schemaId}
                onChange={(e) => setSchemaId(e.target.value)}
              />
            </Form.Item>
            <Form.Item label='Attestation ID'>
              <Input
                value={attestationId}
                onChange={(e) => setAttestationId(e.target.value)}
              />
            </Form.Item>
            <Form.Item label='Schema'>
              <Input.TextArea
                value={schema}
                onChange={(e) => setSchema(e.target.value)}
                rows={4}
              />
            </Form.Item>
            <Form.Item label='Attestation'>
              <Input.TextArea
                value={attestation}
                onChange={(e) => setAttestation(e.target.value)}
                rows={4}
              />
            </Form.Item>
          </Form>
        </Card>

        <Card title='OffChain Operations'>
          <Space wrap>
            <Button type='primary' onClick={createSchema}>
              Create Schema
            </Button>
            <Button type='primary' onClick={createAttestation}>
              Create Attestation
            </Button>
            <Button onClick={getSchemaOffChain}>Get Schema</Button>
            <Button onClick={getAttestationOffChain}>Get Attestation</Button>
            <Button danger onClick={revokeAttestation}>
              Revoke Attestation
            </Button>
          </Space>
        </Card>

        <Card title='OnChain Operations'>
          <Space wrap>
            <Button type='primary' onClick={createSchemaOnChain}>
              Create Schema
            </Button>
            <Button type='primary' onClick={createAttestationOnChain}>
              Create Attestation
            </Button>
            <Button onClick={getSchemaOnChain}>Get Schema</Button>
            <Button onClick={getAttestationOnChain}>Get Attestation</Button>
            <Button danger onClick={revokeAttestationOnChain}>
              Revoke Attestation
            </Button>
          </Space>
        </Card>

        <Card title='Index Service Operations'>
          <Space wrap>
            <Button onClick={getSchemaFromIndexService}>Get Schema</Button>
            <Button onClick={getSchemaListFromIndexService}>
              Get Schema List
            </Button>
            <Button onClick={getAttestationFromIndexService}>
              Get Attestation
            </Button>
            <Button onClick={getAttestationListFromIndexService}>
              Get Attestation List
            </Button>
          </Space>
        </Card>

        <Card title='Execution Result'>
          <pre
            style={{
              background: '#f5f5f5',
              padding: '16px',
              borderRadius: '4px',
              maxHeight: '400px',
              overflow: 'auto',
            }}
          >
            {JSON.stringify(result, null, 2)}
          </pre>
        </Card>
      </Space>
    </div>
  );
};

export const WrappedGettingStarted: React.FC = () => {
  const network = WalletAdapterNetwork.Devnet;
  const wallets = useMemo(
    () => [new UnsafeBurnerWalletAdapter()],
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [network]
  );
  return (
    <QueryClientProvider client={queryClient}>
      <WagmiProvider config={config}>
        <RainbowKitProvider config={rainbowKitConfig}>
          <TonConnectUIProvider manifestUrl='https://sign-public-cdn.s3.us-east-1.amazonaws.com/sp-sdk/manifest_250318013923.json'>
            <WalletProvider wallets={wallets} autoConnect>
              <WalletModalProvider>
                <GettingStarted />
              </WalletModalProvider>
            </WalletProvider>
          </TonConnectUIProvider>
        </RainbowKitProvider>
      </WagmiProvider>
    </QueryClientProvider>
  );
};
