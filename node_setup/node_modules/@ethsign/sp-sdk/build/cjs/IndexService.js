"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexService = void 0;
const offChain_1 = require("./types/offChain");
const utils_1 = require("./utils");
const tools_1 = require("./utils/tools");
class IndexService {
    host;
    constructor(env) {
        this.host = env === 'testnet' ? offChain_1.OffChainRpc.testnet : offChain_1.OffChainRpc.mainnet;
    }
    querySchemaList = async (query) => {
        if (query.id && !(0, tools_1.checkId)(query.id))
            return null;
        const res = await (0, utils_1.request)(`${this.host}/index/schemas?${(0, utils_1.stringifyQueryString)({
            ...query,
            size: query.size || 100,
        })}`);
        const data = res.data || {};
        return { ...data, size: Number(data.size || 0) };
    };
    querySchema = async (schemaId) => {
        if (!(0, tools_1.checkId)(schemaId))
            return null;
        const res = await (0, utils_1.request)(`${this.host}/index/schemas/${schemaId}`);
        return res.data;
    };
    queryAttestationList = async (query) => {
        if (query.id && !(0, tools_1.checkId)(query.id))
            return null;
        const res = await (0, utils_1.request)(`${this.host}/index/attestations?${(0, utils_1.stringifyQueryString)(query)}`);
        const data = res.data || {};
        return data;
    };
    queryAttestation = async (attestationId, options) => {
        if (!(0, tools_1.checkId)(attestationId))
            return null;
        const res = await (0, utils_1.request)(`${this.host}/index/attestations/${attestationId}?${(0, utils_1.stringifyQueryString)(options || {})}`);
        return res.data;
    };
}
exports.IndexService = IndexService;
//# sourceMappingURL=IndexService.js.map