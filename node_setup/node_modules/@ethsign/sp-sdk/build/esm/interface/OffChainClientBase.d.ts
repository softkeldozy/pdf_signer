import { SignProtocolClientBase } from './SignProtocolClientBase';
import { OffChainRpc } from '../types/offChain';
import { Attestation, AttestationResult, ChainType, OffChainSignType, RevokeAttestationResult, Schema, SchemaResult } from '../types';
export declare abstract class OffChainClientBase implements SignProtocolClientBase {
    rpcUrl: OffChainRpc | string;
    chainType: ChainType;
    signType: OffChainSignType;
    apiKey: string;
    constructor({ chainType, signType, rpcUrl, apiKey, }: {
        chainType: ChainType;
        signType: OffChainSignType;
        rpcUrl?: OffChainRpc | string;
        apiKey: string;
    });
    revokeAttestation(attestationId: string, options?: {
        reason?: string | undefined;
    }): Promise<RevokeAttestationResult>;
    abstract getAccount(): Promise<{
        address: string;
        publicKey?: string;
    }>;
    abstract signTypedData(data: {
        message: {
            [key: string]: any;
        };
        types: {
            [key: string]: {
                name: string;
                type: string;
            }[];
        };
        primaryType: string;
    }): Promise<{
        message: any;
        signature: string;
        publicKey: string;
    }>;
    abstract signMessage(message: string): Promise<{
        signature: string;
        message: string;
        publicKey: string;
    }>;
    createSchema(schema: Schema): Promise<SchemaResult>;
    getSchema(schemaId: string): Promise<Schema>;
    createAttestation(attestation: Attestation): Promise<AttestationResult>;
    getAttestation(attestationId: string): Promise<Attestation>;
}
//# sourceMappingURL=OffChainClientBase.d.ts.map