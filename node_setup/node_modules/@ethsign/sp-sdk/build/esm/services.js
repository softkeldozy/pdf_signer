import { DataLocationOnChain } from './types';
import { OffChainRpc } from './types/offChain';
import { request, stringifyQueryString } from './utils';
import { throwApikeyError } from './utils/tools';
export const getDataFromStorage = async (data) => {
    return request(`${OffChainRpc.mainnet}/sp/storage-data?dataId=${data.dataId}&dataLocation=${data.dataLocation === DataLocationOnChain.ARWEAVE ? 'arweave' : 'ipfs'}`);
};
export const saveDataToStorage = async (data, storageType, apiKey) => {
    if (!apiKey) {
        throwApikeyError();
    }
    const res = await request(`${OffChainRpc.mainnet}/sp/offchain-storage`, {
        headers: {
            'x-sign-api-key': apiKey,
        },
        method: 'POST',
        body: JSON.stringify({ data, storageType }),
    });
    if (!res?.data?.cid) {
        throw new Error('save data to storage failed');
    }
    return res?.data?.cid;
};
export const getOffChainStorageData = async (data) => {
    const res = await request(`${OffChainRpc.mainnet}/sp/offchain-storage?${stringifyQueryString(data)}`, {});
    return JSON.parse(res.data);
};
export const saveSchemaToStorage = async (data) => {
    if (!data.apiKey) {
        throwApikeyError();
    }
    const res = await request(`${OffChainRpc.mainnet}/sp/save-schema-data`, {
        headers: {
            'x-sign-api-key': data.apiKey || '',
        },
        body: JSON.stringify({
            dataLocation: data.dataLocation,
            name: data.name,
            description: data.description,
            data: data.data,
        }),
        method: 'POST',
    });
    if (!res?.data?.cid) {
        throw new Error('save data to storage failed');
    }
    return res?.data?.cid;
};
//# sourceMappingURL=services.js.map