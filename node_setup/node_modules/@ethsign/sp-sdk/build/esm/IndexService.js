import { OffChainRpc } from './types/offChain';
import { request, stringifyQueryString } from './utils';
import { checkId } from './utils/tools';
export class IndexService {
    host;
    constructor(env) {
        this.host = env === 'testnet' ? OffChainRpc.testnet : OffChainRpc.mainnet;
    }
    querySchemaList = async (query) => {
        if (query.id && !checkId(query.id))
            return null;
        const res = await request(`${this.host}/index/schemas?${stringifyQueryString({
            ...query,
            size: query.size || 100,
        })}`);
        const data = res.data || {};
        return { ...data, size: Number(data.size || 0) };
    };
    querySchema = async (schemaId) => {
        if (!checkId(schemaId))
            return null;
        const res = await request(`${this.host}/index/schemas/${schemaId}`);
        return res.data;
    };
    queryAttestationList = async (query) => {
        if (query.id && !checkId(query.id))
            return null;
        const res = await request(`${this.host}/index/attestations?${stringifyQueryString(query)}`);
        const data = res.data || {};
        return data;
    };
    queryAttestation = async (attestationId, options) => {
        if (!checkId(attestationId))
            return null;
        const res = await request(`${this.host}/index/attestations/${attestationId}?${stringifyQueryString(options || {})}`);
        return res.data;
    };
}
//# sourceMappingURL=IndexService.js.map